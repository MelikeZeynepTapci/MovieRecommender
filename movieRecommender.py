# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X359O7fb_NqN0bwKKQlEd86myLQpCOsf

Film Önericisi sistemimiz için ilk olarak pandas ve numpy kütüphanelerini import ediyoruz. Ayrıca daha sonra kullanmak üzere sklearn'den countVectorizer ve cosine_similarity'i de import ediyoruz.
"""

import pandas as pd
import numpy as np 
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

movies_url = "https://raw.githubusercontent.com/kaveai/arge-odakli-yapay-zeka-egitimi2-sorulari/main/datasets/movies.csv"
ratings_url = "https://raw.githubusercontent.com/kaveai/arge-odakli-yapay-zeka-egitimi2-sorulari/main/datasets/ratings.csv"

"""movies ve ratings değişkenleriyle tanımladığımız DataFrame'leri merge ile birleştiriyoruz: """

movies = pd.read_csv(movies_url)
ratings = pd.read_csv(ratings_url) 
df = pd.merge(ratings, movies,how="left", on="movieId") 
df.head()

"""Ben genres sütunundaki kelimeleri ayrı ayrı görebilmek adına, arada pipe (|) olmayacak şekilde düzenlemek için bir fonksiyon yazdım (Ayrıca cosine similarity kullanacağımız zaman bu kelimelerin ayrı ayrı, düzgün şekilde dataframe'de bulunuyor olması gerek)


"""

genresSeperated = []
for i in  df["genres"]:
   i = i.replace("|", " ")
   genresSeperated.append(i)
   
genresSeperated = tuple(genresSeperated)

df["genresSeperated"]=genresSeperated
df.drop("genres", axis=1, inplace=True)

df.head()

"""Daha sonra filmler arasında çekim yılı açısından da bir benzerlik kurabilmek adına film isimlerinden yıllarını ayırarak ayrı bir sütun olarak df'e ekliyorum."""

year = []
for i in df["title"]:
    i = i[-5:-1]
    year.append(i)
year = tuple(year)

df["year"]=year
df.head()

"""Yıl, türler ve puanlama bizim kullanacağımız esas parametler. Bunun için fillna ile eğer NaN değer varsa dolduruyoruz."""

features = ["year", "genresSeperated", "rating"]
for feature in features: 
    df[feature] = df[feature].fillna("")

"""Daha sonra bu özelliklerin hepsini ayrı bir sütunda bir araya getiriyoruz."""

def combined_features(row):
    return str(row["year"]) +" "+row["genresSeperated"]+ " "+ str(row["rating"])

df["combined_features"] = df.apply(combined_features, axis=1)
df.head()

"""CountVectorizer ile combined_features sütunumuzdaki eşleşmelerin her biri için bir puan veriliyor. countMatrix ie de bu değerleri bir matris içerisinde gösteriyoruz. """

cv = CountVectorizer()
countMatrix = cv.fit_transform(df["combined_features"])
print("Count Matrix: ", countMatrix.toarray())

"""Benzerlik bulmak için asıl kilit nokta kosinüs benzerliğini kullanmak. Kosinüs benzerliği 1'e ne kadar yakınsa bu değerler her bir satırdaki film ile ne kadar benziyor demek. Fakat elde ettiğimiz bu tablo çok, çok büyük bir tablo. O sebeple benim programım -bilgisayardan kaynaklı olduğunu varsayıyorum- çok fazla RAM kullanması sebebiyle kernel çökmesiyle karşılaştı ve buna ancak, bu matrisin yalnızca ilk 20.000 satırını kullanarak çözüm bulabildim. 
Yalnızca sınırla sayıda bir veriyi kullacağımız için elde edeceğimiz "Benzer Filmler" listesi de bir hayli kısa olacak.
"""

cosineSim = cosine_similarity(countMatrix[0:20000])
  cosineSim

"""Filmin adını girdiğimizde lowercase, uppercase olmasına bakılmaksızın ve filmin verisetinde yer aldığı şekliyle tarihiyle beraber yazılıp yazılmaksızın, filmin veri setindeki orijinal ismini verecek bir fonksiyon yazdım."""

def giveFullName(name): 
    name = name.lower()
    for i in enumerate(df['title']):
        fullMovieTitle = i[1]
        shortMovieTitle = fullMovieTitle[:-7]
        shortMovieTitle = shortMovieTitle.lower()
        
        if(name==shortMovieTitle): 
            name = fullMovieTitle
    return name

def getTitle(movieId):
    return df[df.movieId == movieId]["title"].values[0]

def getIndex(title):
    title = giveFullName(title)
    return df[df.title == title]["movieId"].values[0]

getIndex("iron man")

"""Benzer filmlerin en yüksekten en düşük puana göre listesini verecek olan bu fonksiyonda, countMatrix'in yalnızca belli bir kısmını kullandığımız için hata almamak adına try-except bloku yazdım. Gördüğünüz üzere yine aynı sebepten 15 adet değil genelde daha az sonuç gösteriyor: """

def filmoner(movieTitle): 
  movieId = getIndex(movieTitle)
  similarMovies = list(enumerate(cosineSim[movieId]))
  
  SimilarMoviesSorted = sorted(similarMovies, key=lambda x:x[1], reverse=True)

  i=0
  try: 
    for movie in SimilarMoviesSorted:
      id = movie[0]
      print(getTitle(id))
      i=i+1
      if i>15:
        break
  except: 
    pass

filmoner("jumanji")